1.Making an editor config
  editorconfig.com
  Add .editorconfig into the project and add the missing plugin

2. Using package management
NPM
  For security run node security
  ``npm i g nsp``
  For running it locally just run `nsp check`

3. Development server
  http-server, live-server, express also you can use it in production
  koa, hapi
  webpack devserver
  browsersync

  Share in progress
  localtunnel
  `npm i localtunnel -g`
  How to use:
  run the application on the port whatever
  Sau localtunnel to create the url
  lt --port 3000 // will generate the url
  lt --port 3000 --subdomain nameofsubdomain // as long as it isn't taken it will work


  ngrok

  now quick deploy node.js to the cloud
  `npm i -g now`
  Just type now

  Surge
  Only for static files
  `npm i -g surge`

4. Automation
Grunt, Npm, Gulp
Gulp is faster because of pipes which are stored in memory
Npm scripts
  -pretask - will run a task before the task
  npm run all - addon tu run all the task
  `npm-run-all --parallel`

5. Transpiler
Babel, Typescript, Elm

Babel can be configured in .babelrc or package.json with 'babel: { options }'

6. Bundlers

Browserify, Webpack, Rollup, JSPM

7. Linter
JSLint, JSHint, ESLint

Typescript: TSLint

8. Testing and CI, Unit testing

Testing a single function or module, assueres that a function return exactly what it needs, and the api are mocked and external depedencies.
There is also integration testing, automating testing.
Tools like selenium are popular in automating testing.
There are six important decisions:
Framework, assertion library , helper librarie, where to run , when to run.
Testing frameworks:
Mocka, Jasmine includes assertion library, Tape is the lineast and minimum configuration, Qunit for jquery.
AVA a new framework runs in parallel and only rerun the one that aren t ok.
JEST for React

Assertion library is what you expect
`expect(2+2).to.equal(4)`
Chai, Should.js, Expect

Helper library
Simulate dom JSDOM
Cheerio jquery for the server

Where to run tests:
Browser Karma, Testem can be runned headless
Headless Browser PhantomJS this is faster
In-Memory DOM: JSDOM

Where do the test files belog:
WE can use a folder Test avoid noise in src folder
Deployment confusion

The test in the same folder, easy imports, clear visibility, convenient to open togheter, no recreating folder structure
same folder, easy files to move.
Naming files .spec .test

When to run:
Everytime when you hit save, increase test visibility, low friction
Difference between unit and integration
Unit test a small unit fast, integration tests multiple units involves clicking and waiting they are slower
They are runned on demand or in QA

we will use mocka chai jsdom node

Continous integration

Server: Travis, Appveyour , Jenkins, circleci, semaphore, spanci

For CI we ca use Travis just log in with github and activate the wanted repository

9. Mocking http calls
Development webservers: api-mock, JSON server, JSON Schema faker
BrowserSync, Express

Recomended JSON Server + Json Schema Faker, or full api Express

Plan:
1.Declare schema json schema faker
2.Generate random faker, chance.js , randexp.js
3.Server data via API JSON Server

This is the standard http://json-schema.org/ Also there is GraphQL and others

10. Demo app
- directory structure and file naming
- framework usage
- testing
- mock api
- automated deploment

Codify decisions
Interactive example of working with starter

JS belongs in a .js file

Consider organizing by feature
Extract login in plain old js object POJOS

11.Production build
-minification
-sourcemaps
-dynamic html
-cache busting
-bundle spliting
-error logging

Minification - speeding and page load remove comments white space new lines Also tree-shaking unused code removed, debug via sourcemap

